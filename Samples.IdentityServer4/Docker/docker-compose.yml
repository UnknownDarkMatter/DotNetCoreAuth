services:
  identityServer:
    #ASP.NET Core, avec le runtime uniquement et les optimisations ASP.NET Core, Linux et Windows (multi-arch)
    image: mcr.microsoft.com/dotnet/aspnet:5.0
    #.net 5, avec les kits de développement logiciel (sdk) inclus, sur Linux et Windows (multi-arch)
    #image: mcr.microsoft.com/dotnet/sdk:5.0
    working_dir: /home/IdentityServer
    hostname: myidentityserver
    container_name: myidentityserver
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CLIENT_HOSTNAME : localhost
      CLIENT_PORT: 5003
      CLIENT_PROTOCOL: https
    ports:
      - 5000:5000
      - 5001:5001
    volumes:
      - type: bind
        source: ./bin/IdentityServer
        target: /home/IdentityServer
    entrypoint: |
      /bin/bash -c "
        cp /home/IdentityServer/myidentityserver.docker.crt /usr/share/ca-certificates
        echo "myidentityserver.docker.crt" >> /etc/ca-certificates.conf
        update-ca-certificates
        dotnet /home/IdentityServer/ProCodeGuide.Samples.IdentityServer4.dll
      "
    depends_on:
      - identity-server-db

  client:
    #ASP.NET Core, avec le runtime uniquement et les optimisations ASP.NET Core, Linux et Windows (multi-arch)
    image: mcr.microsoft.com/dotnet/aspnet:5.0
    #.net 5, avec les kits de développement logiciel (sdk) inclus, sur Linux et Windows (multi-arch)
    #image: mcr.microsoft.com/dotnet/sdk:5.0
    working_dir: /home/WebSite
    hostname: mywebsite
    container_name: mywebsite
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      IDENTITY_HOSTNAME: myidentityserver
      IDENTITY_PORT: 5001
      IDENTITY_PROTOCOL: https
    ports:
      - 5002:5002
      - 5003:5003
    volumes:
      - type: bind
        source: ./bin/WebSite
        target: /home/WebSite
    entrypoint: |
      /bin/bash -c "
        cp /home/WebSite/myidentityserver.docker.crt /usr/share/ca-certificates
        cp /home/WebSite/mywebsite.docker.crt /usr/share/ca-certificates
        echo "myidentityserver.docker.crt" >> /etc/ca-certificates.conf
        echo "mywebsite.docker.crt" >> /etc/ca-certificates.conf
        update-ca-certificates
        dotnet /home/WebSite/ProCodeGuide.IdServer4.Client.dll
      "

  identity-server-db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: identity-server-db
    environment:
      SA_PASSWORD: P@ssword1!
      ACCEPT_EULA: Y
    ports:
      - 1433:1433
    volumes:
      - type: bind
        source: ./bin/IdentityServer
        target: /home/IdentityServer
    entrypoint: |
        /bin/bash -c "
            /home/IdentityServer/Migrations/Scripts/Update/identity-server-db-initialization.sh & /opt/mssql/bin/sqlservr
        "
    #entrypoint: |
    #  /bin/bash -c "
    #    /opt/mssql/bin/sqlservr
    #    /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -U sa -P $${SA_PASSWORD} -i /home/IdentityServer/Migrations/Scripts/Update/20211113105032_CreateDatabase.sql
    #  "
    #entrypoint: sh
    #command: -c '/opt/mssql/bin/sqlservr & /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -U sa -P $${SA_PASSWORD} -d tempdb -q "CREATE DATABASE $${DATABASE}"; wait'



